CONTENTS
---------

1. Windows
2. GNU/Linux
3. Mac OS X
4. FreeBSD
5. Other systems
6. Customization and testing


1. Windows
-----------

For Windows there is an installer program available in the crates
homepage  www.octaspire.com/crates/. With it you can install  and
uninstall a binary version of the game easily with just a  couple
of mouse clicks.

If  you  want  to compile the game in windows yourself, you could
use the provided windows-makefile and Dev-C++ or some other tools.
How  to  do it exactly depends on the compiler or IDE you are us-
ing.


2. GNU/Linux
-------------

For GNU/Linux  there  isn't  currently an installer  or  package-
files  (might  come later), so in these systems the game needs to
be compiled from the  source  code.  Your  system should  already
have a C compiler and make available.  If not, install those (gcc
and make). Then install development versions of the latest stable
versions of  SDL 1.2,  SDL_mixer 1.2,  libpng,  zlib and Lua 5.1.
Then  use the  provided  Makefile  to  build  crates  by  issuing
the following command:

  make -f Makefile.linux

After  the  building  process  is done, you can start the game by
saying:

  ./crates

If you want to run the unit tests in  tests-directory,  you  will
also  need  to  install check, a unit testing framework for C, if
you don't already have it.

Please note that if  you  enable  sounds  and  your  systems  has
PulseAudio,  the SDL(_mixer) + PulseAudio combination might cause
problems at least on some  GNU/Linux-systems.   See  for  example
"the  pulseaudio  hack".  For  example, at the time of writing in
Ubuntu, if your system has SDL with ALSA option (libsdl1.2debian-
alsa)  installed,  sounds  might  be crackling, channels will ebb
away and game will get jammed when you try to  quit  playing.  In
this  case  removing libsdl1.2debian-alsa and installing SDL with
PulseAudio options (libsdl1.2debian-pulseaudio) instead helped.


3. Mac OS X
------------

For  Mac OS X  the  building  process is quite similar to that of
GNU/Linux.  After  you  have  installed  SDL 1.2,  SDL_mixer 1.2,
(libpng, zlib) and  Lua 5.1  you can use the provided makefile to
build crates by issuing the following command:

  make -f Makefile.macosx

After  the  building  process is done, you can start  the game by
saying:

  ./crates

There   isn't   currently   an installer  program  available  for
Mac OS X, but it might be added later.


4. FreeBSD
-----------

For  FreeBSD  the  building  process  is quite similar to that of
GNU/Linux.  After  you  have  installed  SDL 1.2,  SDL_mixer 1.2,
(libpng, zlib),  Lua 5.1  and  gmake  (from the Ports collection)
you can use the provided makefile to build crates by  issuing the
following command:

  gmake -f Makefile.freebsd

After  the  building  process is done, you can start  the game by
saying:

  ./crates


5. Other Systems
-----------------

Game is currently tested only in  Ubuntu  GNU/Linux,  Windows XP,
Mac  OS  X and FreeBSD. Other versions might come later. The code
should  be  quite portable,  because it is written in standard C.
The  non-portable parts can be found in windows- and posix-subdi-
rectories in the src-directory.  At least "/proc/%i/exe"       in
src/posix/linux/oexedirname.c,   "GetModuleFileName"           in
src/windows/odir.c,    "_NSGetExecutablePath"                  in
src/posix/macosx/oexedirname.c  and    "sysctl"                in
src/posix/freebsd/oexedirname.c might  need  changing  for  other
systems.


6. Customization and testing
-----------------------------

The top level directory of crates (source code version)  contains
four makefiles: Makefile.linux, Makefile.macosx, Makefile.windows
and  Makefile.freebsd.   All   four   makefiles   are   generated
automatically with  a Perl script bm.pl that can be found in etc-
directory.  If you  modify the code so  that dependencies change,
for  example  by  adding  new files, you can run bm.pl  from  the
source directory by giving command "etc/bm.pl" to regenerate  the
makefile(s) with all the current dependencies.

The tests-directory of crates (source code version) contains some
unit tests. If you want to run those unit tests, you will need to
install check, a unit testing framework for C, if you  don't  al-
ready have it.
